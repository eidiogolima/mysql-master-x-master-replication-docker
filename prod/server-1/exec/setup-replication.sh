#!/bin/bash

# Script para configurar replica√ß√£o Master x Master automaticamente
# Execute este script ap√≥s os containers estarem rodando
# Uso: ./setup-replication.sh <IP_MASTER_2>

# Verificar se IP foi fornecido
if [ -z "$1" ]; then
    echo "‚ùå Erro: IP do Master 2 n√£o foi fornecido!"
    echo ""
    echo "üìù Uso: ./setup-replication.sh <IP_MASTER_2>"
    echo ""
    echo "Exemplos:"
    echo "  ./setup-replication.sh 192.168.1.20"
    echo "  ./setup-replication.sh 172.20.0.3"
    echo "  ./setup-replication.sh mysql-master-2  (rede Docker)"
    echo ""
    exit 1
fi

MASTER2_IP="$1"
MASTER1_IP="${2:-mysql-master-1}"  # Usar localhost como padr√£o para Docker

echo "üöÄ Configurando Replica√ß√£o Master x Master..."
echo "üì° Master 1: localhost"
echo "üì° Master 2: $MASTER2_IP"
echo ""

# Aguardar containers ficarem prontos
echo "‚è≥ Aguardando containers ficarem prontos..."
sleep 30

# Criar usu√°rio de replica√ß√£o no Master 1
echo "üë§ Criando usu√°rio de replica√ß√£o no Master 1..."
docker exec mysql-master-1 mysql -uroot -pteste123 -e "
CREATE USER IF NOT EXISTS 'replicador'@'%' IDENTIFIED WITH mysql_native_password BY 'teste123';
GRANT REPLICATION SLAVE ON *.* TO 'replicador'@'%';
FLUSH PRIVILEGES;
"

if [ $? -ne 0 ]; then
    echo "‚ùå Erro ao criar usu√°rio no Master 1"
    exit 1
fi

echo "‚úÖ Usu√°rio criado no Master 1"
sleep 5

# Configurar Master 1 para replicar do Master 2 usando GTID
echo "üîÑ Configurando Master 1 para replicar do Master 2 (GTID)..."
docker exec mysql-master-1 mysql -uroot -pteste123 -e "
STOP SLAVE;
RESET SLAVE ALL;
CHANGE MASTER TO
    MASTER_HOST='$MASTER2_IP',
    MASTER_USER='replicador',
    MASTER_PASSWORD='teste123',
    MASTER_AUTO_POSITION=1;
START SLAVE;
"

if [ $? -ne 0 ]; then
    echo "‚ùå Erro ao configurar replica√ß√£o no Master 1"
    exit 1
fi

echo "‚úÖ Master 1 configurado para replicar"

# Aguardar conex√£o estabelecer
sleep 10

# Verificar status da replica√ß√£o
echo ""
echo "‚úÖ Verificando status da replica√ß√£o..."
echo ""
echo "=== STATUS REPLICA√á√ÉO MASTER 1 ==="
docker exec mysql-master-1 mysql -uroot -pteste123 -e "SHOW SLAVE STATUS\G" | grep -E "(Slave_IO_Running|Slave_SQL_Running|Last_Error|Seconds_Behind_Master|Master_Host)"

echo ""

# Verificar se h√° erros
SLAVE_IO=$(docker exec mysql-master-1 mysql -uroot -pteste123 -e "SHOW SLAVE STATUS\G" | grep "Slave_IO_Running:" | awk '{print $2}')
SLAVE_SQL=$(docker exec mysql-master-1 mysql -uroot -pteste123 -e "SHOW SLAVE STATUS\G" | grep "Slave_SQL_Running:" | awk '{print $2}')

if [ "$SLAVE_IO" = "Yes" ] && [ "$SLAVE_SQL" = "Yes" ]; then
    echo "üéâ Replica√ß√£o ATIVA no Master 1!"
else
    echo "‚ö†Ô∏è  Verificando status..."
    if [ "$SLAVE_IO" = "Connecting" ]; then
        echo "üîÑ Master 1 ainda est√° tentando conectar ao Master 2..."
        echo "üí° Dica: Verifique se o IP '$MASTER2_IP' est√° correto e acess√≠vel"
    fi
fi

echo ""
echo "‚úÖ Configura√ß√£o de replica√ß√£o Master 1 conclu√≠da!"
echo ""
echo "üåê Pr√≥ximos passos:"
echo "   1. No Master 2, execute: ./setup-replication.sh $MASTER1_IP"
echo "   2. Acesse o phpMyAdmin em: http://localhost:8085"
echo "   3. Para monitorar: execute './check-replication.sh'"